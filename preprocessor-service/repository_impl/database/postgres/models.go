// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type WorkerType string

const (
	WorkerTypeVideoEncoder       WorkerType = "video-encoder"
	WorkerTypeAsciiEncoder       WorkerType = "ascii-encoder"
	WorkerTypeThumbnailGenerator WorkerType = "thumbnail-generator"
	WorkerTypeAssembler          WorkerType = "assembler"
	WorkerTypeVideoExtractor     WorkerType = "video-extractor"
	WorkerTypeAudioExtractor     WorkerType = "audio-extractor"
	WorkerTypeMetadataExtractor  WorkerType = "metadata-extractor"
)

func (e *WorkerType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WorkerType(s)
	case string:
		*e = WorkerType(s)
	default:
		return fmt.Errorf("unsupported scan type for WorkerType: %T", src)
	}
	return nil
}

type NullWorkerType struct {
	WorkerType WorkerType `json:"worker_type"`
	Valid      bool       `json:"valid"` // Valid is true if WorkerType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWorkerType) Scan(value interface{}) error {
	if value == nil {
		ns.WorkerType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WorkerType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWorkerType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WorkerType), nil
}

type Dag struct {
	ID        pgtype.UUID      `json:"id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

type Dependency struct {
	ID    pgtype.UUID `json:"id"`
	DagID pgtype.UUID `json:"dag_id"`
}

type DependencySource struct {
	ID           pgtype.UUID `json:"id"`
	DagID        pgtype.UUID `json:"dag_id"`
	DependencyID pgtype.UUID `json:"dependency_id"`
	SourceID     pgtype.UUID `json:"source_id"`
}

type DependencyTarget struct {
	ID           pgtype.UUID `json:"id"`
	DagID        pgtype.UUID `json:"dag_id"`
	DependencyID pgtype.UUID `json:"dependency_id"`
	TargetID     pgtype.UUID `json:"target_id"`
}

type Worker struct {
	ID           pgtype.UUID `json:"id"`
	DagID        pgtype.UUID `json:"dag_id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	WorkerType   WorkerType  `json:"worker_type"`
	WorkerConfig []byte      `json:"worker_config"`
}
