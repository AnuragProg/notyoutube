// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package postgres

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchListDependencySourcesOfDependency = `-- name: BatchListDependencySourcesOfDependency :batchmany
SELECT id, dag_id, dependency_id, source_id 
FROM dependency_sources
WHERE dependency_id=$1
`

type BatchListDependencySourcesOfDependencyBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) BatchListDependencySourcesOfDependency(ctx context.Context, dependencyID []pgtype.UUID) *BatchListDependencySourcesOfDependencyBatchResults {
	batch := &pgx.Batch{}
	for _, a := range dependencyID {
		vals := []interface{}{
			a,
		}
		batch.Queue(batchListDependencySourcesOfDependency, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchListDependencySourcesOfDependencyBatchResults{br, len(dependencyID), false}
}

func (b *BatchListDependencySourcesOfDependencyBatchResults) Query(f func(int, []DependencySource, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []DependencySource
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i DependencySource
				if err := rows.Scan(
					&i.ID,
					&i.DagID,
					&i.DependencyID,
					&i.SourceID,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *BatchListDependencySourcesOfDependencyBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchListDependencyTargetsOfDependency = `-- name: BatchListDependencyTargetsOfDependency :batchmany
SELECT id, dag_id, dependency_id, target_id
FROM dependency_targets
WHERE dependency_id=$1
`

type BatchListDependencyTargetsOfDependencyBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) BatchListDependencyTargetsOfDependency(ctx context.Context, dependencyID []pgtype.UUID) *BatchListDependencyTargetsOfDependencyBatchResults {
	batch := &pgx.Batch{}
	for _, a := range dependencyID {
		vals := []interface{}{
			a,
		}
		batch.Queue(batchListDependencyTargetsOfDependency, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchListDependencyTargetsOfDependencyBatchResults{br, len(dependencyID), false}
}

func (b *BatchListDependencyTargetsOfDependencyBatchResults) Query(f func(int, []DependencyTarget, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []DependencyTarget
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i DependencyTarget
				if err := rows.Scan(
					&i.ID,
					&i.DagID,
					&i.DependencyID,
					&i.TargetID,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *BatchListDependencyTargetsOfDependencyBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createDependencies = `-- name: CreateDependencies :batchexec
INSERT INTO dependencies(id, dag_id)
VALUES ($1, $2)
`

type CreateDependenciesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateDependenciesParams struct {
	ID    pgtype.UUID `json:"id"`
	DagID pgtype.UUID `json:"dag_id"`
}

func (q *Queries) CreateDependencies(ctx context.Context, arg []CreateDependenciesParams) *CreateDependenciesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.DagID,
		}
		batch.Queue(createDependencies, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateDependenciesBatchResults{br, len(arg), false}
}

func (b *CreateDependenciesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateDependenciesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createDependencySources = `-- name: CreateDependencySources :batchexec
INSERT INTO dependency_sources(id, dag_id, dependency_id, source_id)
VALUES ($1, $2, $3, $4)
`

type CreateDependencySourcesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateDependencySourcesParams struct {
	ID           pgtype.UUID `json:"id"`
	DagID        pgtype.UUID `json:"dag_id"`
	DependencyID pgtype.UUID `json:"dependency_id"`
	SourceID     pgtype.UUID `json:"source_id"`
}

func (q *Queries) CreateDependencySources(ctx context.Context, arg []CreateDependencySourcesParams) *CreateDependencySourcesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.DagID,
			a.DependencyID,
			a.SourceID,
		}
		batch.Queue(createDependencySources, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateDependencySourcesBatchResults{br, len(arg), false}
}

func (b *CreateDependencySourcesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateDependencySourcesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createDependencyTargets = `-- name: CreateDependencyTargets :batchexec
INSERT INTO dependency_targets(id, dag_id, dependency_id, target_id)
VALUES ($1, $2, $3, $4)
`

type CreateDependencyTargetsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateDependencyTargetsParams struct {
	ID           pgtype.UUID `json:"id"`
	DagID        pgtype.UUID `json:"dag_id"`
	DependencyID pgtype.UUID `json:"dependency_id"`
	TargetID     pgtype.UUID `json:"target_id"`
}

func (q *Queries) CreateDependencyTargets(ctx context.Context, arg []CreateDependencyTargetsParams) *CreateDependencyTargetsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.DagID,
			a.DependencyID,
			a.TargetID,
		}
		batch.Queue(createDependencyTargets, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateDependencyTargetsBatchResults{br, len(arg), false}
}

func (b *CreateDependencyTargetsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateDependencyTargetsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createWorkers = `-- name: CreateWorkers :batchexec
INSERT INTO workers(id, dag_id, name, description, worker_type, worker_config)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateWorkersBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateWorkersParams struct {
	ID           pgtype.UUID `json:"id"`
	DagID        pgtype.UUID `json:"dag_id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	WorkerType   WorkerType  `json:"worker_type"`
	WorkerConfig []byte      `json:"worker_config"`
}

func (q *Queries) CreateWorkers(ctx context.Context, arg []CreateWorkersParams) *CreateWorkersBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.DagID,
			a.Name,
			a.Description,
			a.WorkerType,
			a.WorkerConfig,
		}
		batch.Queue(createWorkers, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateWorkersBatchResults{br, len(arg), false}
}

func (b *CreateWorkersBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateWorkersBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
